{"version":3,"sources":["EMOTIONS.js","LogEmotion.js","App.js","serviceWorker.js","index.js"],"names":["EMOTIONS","Cheerful","value","icon","Happy","Good","Calm","Frustrated","Sad","Annoyed","Angry","LogEmotion","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selected_element","animate_class","saveEmotion","bind","assertThisInitialized","event","preventDefault","el","target","tagName","parentElement","setState","getAttribute","elements","emotion_name","push","react_default","a","createElement","data-key","key","onClick","selectedElememnt","className","React","Component","App","src_LogEmotion","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAoCeA,EApCA,CACXC,SAAY,CACRC,MAAS,EACTC,KAAS,gBAEbC,MAAU,CACNF,MAAS,EACTC,KAAS,gBAEbE,KAAS,CACLH,MAAS,EACTC,KAAS,gBAEbG,KAAS,CACLJ,MAAS,EACTC,KAAS,gBAEbI,WAAe,CACXL,OAAU,EACVC,KAAS,gBAEbK,IAAQ,CACJN,OAAU,EACVC,KAAS,gBAEbM,QAAY,CACRP,OAAU,EACVC,KAAS,gBAEbO,MAAU,CACNR,OAAU,EACVC,KAAS,iBCoBFQ,cA/CX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CAACC,iBAAkB,KAAMC,cAAc,IACpDT,EAAKU,YAAcV,EAAKU,YAAYC,KAAjBV,OAAAW,EAAA,EAAAX,CAAAD,IAHJA,2EAMPa,GACRA,EAAMC,iBACN,IAAIC,EAAKF,EAAMG,OACE,QAAdD,EAAGE,UACFF,EAAKA,EAAGG,eAEZf,KAAKgB,SAAS,CACVX,iBAAkBO,EAAGK,aAAa,YAClCX,cAAe,sDAKnB,IAAIY,EAAW,GAEf,IAAK,IAAIC,KAAgBnC,EAClBA,EAASmC,GAAcjC,MACtBgC,EAASE,KAAKC,EAAAC,EAAAC,cAAA,MAAIC,WAAUL,EAAcM,IAAKN,EAAcjC,MAAOF,EAASmC,GAAcjC,MAAOwC,QAAS1B,KAAKO,aAAac,EAAAC,EAAAC,cAAA,YAAOvC,EAASmC,GAAchC,MAAagC,IAMhL,IAAIQ,EAAmB,KAQvB,OAPkC,MAA/B3B,KAAKI,MAAMC,mBACVsB,EAAoBN,EAAAC,EAAAC,cAAA,OAAKK,UAAU,oBACnCP,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,QAAMK,UAAW5B,KAAKI,MAAME,eAAgBtB,EAASgB,KAAKI,MAAMC,kBAAkBlB,MAAaa,KAAKI,MAAMC,kBAE1Ga,EAAW,MAEPG,EAAAC,EAAAC,cAAA,OAAKK,UAAU,iBAClBD,EACDN,EAAAC,EAAAC,cAAA,UACCL,GAEDG,EAAAC,EAAAC,cAAA,OAAKK,UAAU,kBA3CFC,IAAMC,WCQhBC,MANf,WACE,OACIV,EAAAC,EAAAC,cAACS,EAAD,OCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.efa3dc60.chunk.js","sourcesContent":["var EMOTIONS = {\n    \"Cheerful\": {\n        \"value\": 3,\n        \"icon\" : \"😁\"\n    },\n    \"Happy\" : {\n        \"value\": 2,\n        \"icon\" : \"😀\"\n    },\n    \"Good\" : {\n        \"value\": 1,\n        \"icon\" : \"😄\"\n    },\n    \"Calm\" : {\n        \"value\": 0,\n        \"icon\" : \"😐\"\n    },\n    \"Frustrated\" : {\n        \"value\": -1,\n        \"icon\" : \"😤\"\n    },\n    \"Sad\" : {\n        \"value\": -2,\n        \"icon\" : \"😣\"\n    },\n    \"Annoyed\" : {\n        \"value\": -3,\n        \"icon\" : \"🤯\"\n    },\n    \"Angry\" : {\n        \"value\": -4,\n        \"icon\" : \"🤬\"\n    }\n};\n\n\nexport default EMOTIONS;","import React from 'react';\nimport EMOTIONS from './EMOTIONS';\n\nclass LogEmotion extends React.Component{\n    constructor(props) {\n        super(props);\n        this.state = {selected_element: null, animate_class:\"\"};\n        this.saveEmotion = this.saveEmotion.bind(this);\n    }\n\n    saveEmotion(event){\n        event.preventDefault();\n        var el = event.target;\n        if(el.tagName == 'SPAN'){\n            el = el.parentElement;\n        }\n        this.setState({\n            selected_element: el.getAttribute('data-key'),\n            animate_class: 'animated  bounce'\n        });\n    }\n\n    render(){\n        var elements = [];\n\n        for (var emotion_name in EMOTIONS) {\n            if(EMOTIONS[emotion_name].value >= 0){\n                elements.push(<li data-key={emotion_name} key={emotion_name} value={EMOTIONS[emotion_name].value} onClick={this.saveEmotion}><span>{EMOTIONS[emotion_name].icon}</span>{emotion_name}</li>)\n            }else{\n                elements.push(<li data-key={emotion_name} key={emotion_name} value={EMOTIONS[emotion_name].value} onClick={this.saveEmotion}><span>{EMOTIONS[emotion_name].icon}</span>{emotion_name}</li>)\n            }\n        }\n\n        var selectedElememnt = null;\n        if(this.state.selected_element != null){\n            selectedElememnt =  <div className=\"selected-element\">\n            <h3>Entery saved!</h3>\n            <span className={this.state.animate_class}>{EMOTIONS[this.state.selected_element].icon}</span>{this.state.selected_element}\n            </div>;\n            elements = null;\n        }\n        return (<div className=\"emotions-list\">\n            {selectedElememnt}\n            <ul>\n            {elements}\n            </ul>\n            <div className=\"clear\"></div>\n        </div>);\n    }\n}\n\nexport default LogEmotion;","import React from 'react';\nimport './animate.css';\nimport './App.css';\nimport LogEmotion from './LogEmotion';\n\nfunction App() {\n  return (\n      <LogEmotion/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}